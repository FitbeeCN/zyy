/**
 * cookie解析/设置模块
 * 重新封装connect的cookie模块
 */

var cookieConfig = require( 'config' ).cookieConfig;
if ( typeof cookieConfig != 'object' || !cookieConfig.cookieSecret) {
  throw new TypeError('cookieConfig is not configed.');
}

var secret  = cookieConfig.cookieSecret;
var domain  = cookieConfig.domain  || '';
var path    = cookieConfig.path    || '/';
var expires = cookieConfig.expires || 3600*12;

module.exports = {

  /**
   * 解析request的cookie字符串
   * @param {String}  str 需要解析的cookie字符串
   * @return {Object}  解析后的一个cookie对象
   * @example cookie.parse('foo=123') { foo:123 }
   * @example cookie.parse('foo="bar=123456789&name=Magic+Mouse"') { foo: 'bar=123456789&name=Magic+Mouse' }
   * @example cookie.parse('email=%20%22%2c%3b%2f') { email: ' ",;/' }
   * @example cookie.parse('foo=%1;bar=bar') { foo: '%1', bar: 'bar' }
   */
  parse: function(str){
    var obj = {};
    if ( !str ) {
      return obj;
    }
    
    var pairs = str.split(/[;,] */);
    
    var thisModule = this;
    pairs.forEach(function(pair) {
      var eq_idx = pair.indexOf('=');
      var key = pair.substr(0, eq_idx).trim();
      var val = pair.substr(++eq_idx, pair.length).trim();

      // quoted values
      if ('"' == val[0]) {
        val = val.slice(1, -1);
      }

      // 只解析一次不覆盖前值
      key = thisModule.unsign(key);
      if (obj[key] == undefined) {
        try { val = decodeURIComponent(val); } catch (e) { }
        val = thisModule.unsign(val, secret);
        obj[key] = val;
      }
    });
    
    return obj;
  },
  
  /**
   * 生成cookie字符串
   * @param {String} name
   * @param {String} val
   * @param {Object} opt, keys: maxAge/domain/path/expires/httpOnly/secure 
   * @return {String} 
   * @example cookie.serialize('foo', 'bar baz') 'foo=bar%20baz'
   * @example cookie.serialize('foo', 'bar', { secure: true } ) 'foo=bar; Secure'
   */
  serialize: function(name, val, opt){
    var pairs = [name + '=' + encodeURIComponent(val)];
    opt = opt || {};

    if (opt.maxAge) pairs.push('Max-Age=' + opt.maxAge);
    if (opt.domain) pairs.push('Domain=' + opt.domain);
    if (opt.path) pairs.push('Path=' + opt.path);
    if (opt.expires) pairs.push('Expires=' + opt.expires);
    if (opt.httpOnly) pairs.push('HttpOnly');
    if (opt.secure) pairs.push('Secure');

    return pairs.join('; ');
  },
  
  /**
   * 生成cookie加密值字符串，防止被篡改
   * @param {String} val 需要加密的字符串
   * @param {String} secret 密钥
   * @return {String} 
   */
  sign: function(val){
    var crypto = require('crypto');
    return val + '.' + crypto
    .createHmac('sha256', secret)
    .update(val)
    .digest('base64')
    .replace(/\=+$/, '');
  },
  
  /**
   * 反解cookie加密后的值
   * @param {String} val 需要加密的字符串
   * @param {String} secret 密钥
   * @return {Boolean|String} 如果没被篡改，返回值否则返回false
   */
  unsign: function(val){
    var str = val.slice(0, val.lastIndexOf('.'));
    return this.sign(str, secret) == val ? str : false;
  },
  
  /**
   * 设置响应cookie
   * @param {Object} req 本次设置的请求对象 传递此参数是为了本次能访问到设置的值
   * @param {Object} res 本次设置的响应对象
   * @param {String} key 本次设置的键名
   * @param {String} val 本次设置的值
   * @param {Object} opt keys: maxAge/domain/path/expires/httpOnly/secure
   * @return {Boolean}
   */
  setCookie: function(req, res, name, val, opt){ 
    if ( typeof req != 'object' ||  typeof res != 'object' ) {
      throw new TypeError('req/res is not an object');
    }
    if ( typeof name != 'string' || typeof val != 'string' ) {
      throw new TypeError('name/val is not a string');
    }
    name = name.trim();
    val  = val.trim();
    if (!name || !val) {
      throw new Error('key/val is empty ');
    }
    
    opt = typeof opt == 'object' && opt  ?  opt  :  {};
    if ( !opt.path )  opt.path = path ;
    if ( opt.expires === undefined ) opt.expires = expires;
    var date = new Date();
    date.setTime(date.getTime() + opt.expires*1000 );
    opt.expires = date.toUTCString();
    
    var cookieStr = this.serialize(this.sign(name), this.sign(val), opt);
    if ( res.willBeSetCookies === undefined ) res.willBeSetCookies = [];
    res.willBeSetCookies.push(cookieStr);
    res.setHeader('Set-Cookie', res.willBeSetCookies);

    if ( req.COOKIE === undefined ) {
      this.parseCookie(req);
    }
    if ( opt.expires > 0 ) req.COOKIE[name] = val;
    
    return true;
  },
  
  /**
   * 解析请求的cookie
   * @param {Object} req 请求对象
   * @return {Object} this
   */
  parseCookie: function(req){
    req.COOKIE = this.parse(req.headers['Cookie']);
    return true;
  },
  
  /**
   * 解析用户状态
   */
  rememberMe: function(req) {
    if (!req.COOKIE || typeof req.COOKIE != 'object' || !req.COOKIE['remember_me']) {
      req.user_id = 0;
      req.user_info = {};
      return false;
    }
    
  }
};